{"version":3,"sources":["serviceWorker.js","Card.js","Cardlist.js","SearchBox.js","Scroll.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Cards","props","className","src","id","alt","name","email","Cardlist","robots","map","user","i","Card","key","Searchbox","Searchchange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","App","onSearchChange","event","setState","searchfields","target","value","state","bind","fetch","then","response","json","users","this","filteredRobots","filter","robot","toLowerCase","includes","length","React","Component","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"8LAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mDCJSC,MAZf,SAAeC,GACd,OACC,yBAAKC,UAAU,6CACf,yBAAKC,IAAG,+BAA0BF,EAAMG,GAAhC,SAA2CC,IAAI,OACvD,yBAAKH,UAAU,MACf,4BAAKD,EAAMK,MACX,2BAAIL,EAAMM,UCaGC,EAlBE,SAAC,GAAa,IAAZC,EAAW,EAAXA,OAClB,OACC,6BAEAA,EAAOC,KAAI,SAACC,EAAKC,GACjB,OAAS,kBAACC,EAAD,CACRC,IAAKF,EACLR,GAAIK,EAAOG,GAAGR,GACdE,KAAMG,EAAOG,GAAGN,KAChBC,MAAOE,EAAOG,GAAGL,aCGLQ,MAbf,YAAmC,IAAfC,EAAc,EAAdA,aAClB,OACC,yBAAKd,UAAU,OACb,2BACAA,UAAU,mCACVe,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCEAI,EARA,SAACnB,GACf,OACC,yBAAKoB,MAAO,CAAEC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAS,UACtEvB,EAAMwB,WC8CMC,G,wDA1Cd,aAAc,IAAD,8BACZ,gBAgBDC,eAAiB,SAACC,GACjB,EAAKC,SAAS,CAAEC,aAAeF,EAAMG,OAAOC,SAhB5C,EAAKC,MAAQ,CACZxB,OAAO,GACPqB,aAAa,IAGd,EAAKH,eAAiB,EAAKA,eAAeO,KAApB,gBAPV,E,gEAWO,IAAD,OAClBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKV,SAAS,CAAEpB,OAAQ8B,S,+BAM/B,IAAD,EAEuBC,KAAKP,MAA5BH,EAFA,EAEAA,aAAarB,EAFb,EAEaA,OACbgC,EAAkBhC,EAAOiC,QAAO,SAAAC,GACtC,OAAOA,EAAMrC,KAAKsC,cAAcC,SAASf,EAAac,kBAGtD,OAAInC,EAAOqC,OAKX,yBAAK5C,UAAU,MACf,wBAAIE,GAAG,QAAP,cACA,kBAAC,EAAD,CAAWY,aAAcwB,KAAKb,iBAC9B,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAUlB,OAAQgC,MARV,2C,GA7BOM,IAAMC,YCHxBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACA,kBAAC,EAAD,OAEAC,SAASC,eAAe,SNyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.dde37461.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\nfunction Cards(props){\r\n\treturn (\r\n\t\t<div className='bg-green dib br3 pa3 ma2 grow bw2 shadow5'>\r\n\t\t<img src={`https://robohash.org/${props.id}mohit`} alt='yo' />\r\n\t\t<div className='tc'>\r\n\t\t<h1>{props.name}</h1>\r\n\t\t<p>{props.email}</p>\r\n\t\t</div>\r\n\t\t</div>\r\n\r\n\t);\r\n}\r\nexport default Cards;","import React from 'react'\r\nimport Cards from './Card.js';\r\n\r\nconst Cardlist = ({robots}) =>{\r\n\treturn(\r\n\t\t<div>\r\n\t\t{\r\n\t\trobots.map((user,i) => {\r\n\t\treturn ( <Cards \r\n\t\t\tkey={i} \r\n\t\t\tid={robots[i].id} \r\n\t\t\tname={robots[i].name} \r\n\t\t\temail={robots[i].email}\r\n\t\t/>\r\n\t\t);\r\n\t\t})\r\n\t}\r\n\t</div>\r\n\t);\r\n} \r\n\r\nexport default Cardlist;","import React from 'react'\r\n\r\nfunction Searchbox({Searchchange}){\r\n\t\treturn(\r\n\t\t\t<div className='pa2'>\r\n\t\t\t  <input \r\n\t\t\t  className='pa3 ba b--green bg-lightest-blue'\r\n\t\t\t  type=\"search\" \r\n\t\t\t  placeholder='search robots' \r\n\t\t\t  onChange={Searchchange}\r\n\t\t\t  />\r\n\t\t\t</div>\r\n\t\t\t)\r\n}\r\n\r\nexport default Searchbox;  ","import React from 'react'\r\n\r\n\r\nconst Scroll = (props) => {\r\n\treturn(\r\n\t\t<div style={{ overflowY: 'scroll', border: '4px solid black', height : '600px'}}>\r\n\t\t{props.children}\r\n\t\t</div>\r\n\t\t)\r\n}\r\n\r\nexport default Scroll;","import React from 'react'\r\nimport './index.css';\r\nimport 'tachyons';\r\nimport Cardlist from './Cardlist'\r\nimport Searchbox from './SearchBox'\r\nimport {Robots} from './Robot' \r\nimport Scroll from './Scroll'\r\nimport './App.css'\r\n\r\nclass App extends React.Component{\r\n\tconstructor(){\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\trobots:[],\r\n\t\t\tsearchfields:''\r\n\t\t}\r\n\r\n\t\tthis.onSearchChange = this.onSearchChange.bind(this);\r\n\r\n\t};\r\n\r\n\tcomponentDidMount(){\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users') //fetch is tool for us to make request to server\r\n\t\t.then(response => response.json())\r\n\t\t.then(users => this.setState({ robots: users}))\r\n\t}\r\n\r\n\tonSearchChange = (event) =>{\r\n\t\tthis.setState({ searchfields : event.target.value})\r\n\t}\r\n\trender(){\r\n\r\n\t\tconst {searchfields,robots} = this.state;\r\n\t\t\tconst filteredRobots =  robots.filter(robot =>{\r\n\t\t\treturn robot.name.toLowerCase().includes(searchfields.toLowerCase())\r\n\t\t})\r\n\r\n\t\t\tif(!robots.length){\r\n\t\t\t\treturn <h1>Loading</h1>\r\n\t\t\t}\r\n\t\t\telse{\r\n\treturn(\r\n\t  <div className='tc'>\r\n\t  <h1 id=\"head\">Robofriend</h1>\r\n\t  <Searchbox Searchchange={this.onSearchChange}/>\r\n\t  <Scroll>\r\n\t  <Cardlist robots={filteredRobots}/>\r\n\t  </Scroll>\r\n\t  </div>\r\n\t)}\r\n}\r\n}\r\nexport default App  ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport App from './App'\n\n\nReactDOM.render(\n  <React.StrictMode>\n  <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}